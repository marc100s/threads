declare const ErrorCode: {
    readonly FILE_INVALID_TYPE: "FILE_INVALID_TYPE";
    readonly FILE_TOO_LARGE: "FILE_TOO_LARGE";
    readonly FILE_TOO_SMALL: "FILE_TOO_SMALL";
    readonly TOO_MANY_FILES: "TOO_MANY_FILES";
};
type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];

type AcceptProp = Record<string, string[]>;

type DropEvent = React.DragEvent<HTMLElement> | React.ChangeEvent<HTMLInputElement> | DragEvent | Event;
type FileError = {
    message: string;
    code: ErrorCode | (string & {});
};
interface FileRejection {
    file: File;
    errors: FileError[];
}
type DropzoneOptions = Pick<React.HTMLProps<HTMLElement>, "multiple" | "onDragEnter" | "onDragOver" | "onDragLeave"> & {
    accept?: AcceptProp;
    minSize?: number;
    maxSize?: number;
    maxFiles?: number;
    preventDropOnDocument?: boolean;
    noClick?: boolean;
    noKeyboard?: boolean;
    noDrag?: boolean;
    noDragEventsBubbling?: boolean;
    disabled?: boolean;
    onDrop?: <T extends File>(acceptedFiles: T[], fileRejections: FileRejection[], event: DropEvent) => void;
    onDropAccepted?: <T extends File>(files: T[], event: DropEvent) => void;
    onDropRejected?: (fileRejections: FileRejection[], event: DropEvent) => void;
    getFilesFromEvent?: (event: DropEvent) => Promise<(File | DataTransferItem)[]>;
    onFileDialogCancel?: () => void;
    onFileDialogOpen?: () => void;
    onError?: (err: Error) => void;
    validator?: <T extends File>(file: T) => FileError | FileError[] | null;
    useFsAccessApi?: boolean;
    autoFocus?: boolean;
};
type DropzoneState = {
    isFocused: boolean;
    isDragActive: boolean;
    isDragAccept: boolean;
    isDragReject: boolean;
    isFileDialogActive: boolean;
    acceptedFiles: File[];
    fileRejections: FileRejection[];
    rootRef: React.RefObject<HTMLElement>;
    inputRef: React.RefObject<HTMLInputElement>;
};
type DropzoneMethods = {
    getRootProps: <T extends DropzoneRootProps>(props?: T) => T;
    getInputProps: <T extends DropzoneInputProps>(props?: T) => T;
    open: null | (() => void);
};
interface DropzoneRootProps extends React.HTMLAttributes<HTMLElement> {
    refKey?: string;
    [key: string]: any;
}
interface DropzoneInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
    refKey?: string;
}

export { AcceptProp as A, DropEvent as D, FileError as F, FileRejection as a, DropzoneOptions as b, DropzoneState as c, DropzoneMethods as d, DropzoneRootProps as e, DropzoneInputProps as f };
