"use client";
import {
  INTERNAL_uploadthingHookGen,
  useDropzone
} from "./chunk-36V7DNOE.mjs";

// src/components/button.tsx
import { useEffect, useRef, useState } from "react";
import { twMerge } from "tailwind-merge";
import {
  allowedContentTextLabelGenerator,
  contentFieldToContent,
  generateMimeTypes,
  generatePermittedFileTypes,
  styleFieldToClassName,
  styleFieldToCssObject
} from "uploadthing/client";

// src/components/shared.tsx
import { jsx } from "react/jsx-runtime";
function getFilesFromClipboardEvent(event) {
  var _a;
  const dataTransferItems = (_a = event.clipboardData) == null ? void 0 : _a.items;
  if (!dataTransferItems)
    return;
  const files = Array.from(dataTransferItems).reduce((acc, curr) => {
    const f = curr.getAsFile();
    return f ? [...acc, f] : acc;
  }, []);
  return files;
}
function Spinner() {
  return /* @__PURE__ */ jsx(
    "svg",
    {
      className: "z-10 block h-5 w-5 animate-spin align-middle text-white",
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 576 512",
      children: /* @__PURE__ */ jsx(
        "path",
        {
          fill: "currentColor",
          d: "M256 32C256 14.33 270.3 0 288 0C429.4 0 544 114.6 544 256C544 302.6 531.5 346.4 509.7 384C500.9 399.3 481.3 404.6 465.1 395.7C450.7 386.9 445.5 367.3 454.3 351.1C470.6 323.8 480 291 480 255.1C480 149.1 394 63.1 288 63.1C270.3 63.1 256 49.67 256 31.1V32z"
        }
      )
    }
  );
}
var progressWidths = {
  0: "after:w-0",
  10: "after:w-[10%]",
  20: "after:w-[20%]",
  30: "after:w-[30%]",
  40: "after:w-[40%]",
  50: "after:w-[50%]",
  60: "after:w-[60%]",
  70: "after:w-[70%]",
  80: "after:w-[80%]",
  90: "after:w-[90%]",
  100: "after:w-[100%]"
};

// src/components/button.tsx
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
function UploadButton(props) {
  var _a, _b, _c, _d, _e;
  const $props = props;
  const { mode = "auto", appendOnPaste = false } = $props.config ?? {};
  const useUploadThing = INTERNAL_uploadthingHookGen();
  const fileInputRef = useRef(null);
  const labelRef = useRef(null);
  const [uploadProgressState, setUploadProgress] = useState(
    $props.__internal_upload_progress ?? 0
  );
  const [files, setFiles] = useState([]);
  const [isManualTriggerDisplayed, setIsManualTriggerDisplayed] = useState(false);
  const uploadProgress = $props.__internal_upload_progress ?? uploadProgressState;
  const { startUpload, isUploading, permittedFileInfo } = useUploadThing(
    $props.endpoint,
    {
      onClientUploadComplete: (res) => {
        var _a2;
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
        setIsManualTriggerDisplayed(false);
        setFiles([]);
        (_a2 = $props.onClientUploadComplete) == null ? void 0 : _a2.call($props, res);
        setUploadProgress(0);
      },
      onUploadProgress: (p) => {
        var _a2;
        setUploadProgress(p);
        (_a2 = $props.onUploadProgress) == null ? void 0 : _a2.call($props, p);
      },
      onUploadError: $props.onUploadError,
      onUploadBegin: $props.onUploadBegin
    }
  );
  const { fileTypes, multiple } = generatePermittedFileTypes(
    permittedFileInfo == null ? void 0 : permittedFileInfo.config
  );
  const ready = $props.__internal_ready ?? ($props.__internal_state === "ready" || fileTypes.length > 0);
  useEffect(() => {
    const handlePaste = (event) => {
      if (!appendOnPaste)
        return;
      if (document.activeElement !== labelRef.current)
        return;
      const pastedFiles = getFilesFromClipboardEvent(event);
      if (!pastedFiles)
        return;
      setFiles((prev) => [...prev, ...pastedFiles]);
      if (mode === "auto") {
        const input = "input" in $props ? $props.input : void 0;
        void startUpload(files, input);
      }
    };
    window.addEventListener("paste", handlePaste);
    return () => {
      window.removeEventListener("paste", handlePaste);
    };
  }, [startUpload, appendOnPaste, $props, files, mode, fileTypes]);
  const getUploadButtonText = (fileTypes2) => {
    if (isManualTriggerDisplayed)
      return `Upload ${files.length} file${files.length === 1 ? "" : "s"}`;
    if (fileTypes2.length === 0)
      return "Loading...";
    return `Choose File${multiple ? `(s)` : ``}`;
  };
  const getInputProps = () => {
    var _a2;
    return {
      type: "file",
      ref: fileInputRef,
      multiple,
      accept: (_a2 = generateMimeTypes(fileTypes ?? [])) == null ? void 0 : _a2.join(", "),
      onChange: (e) => {
        if (!e.target.files)
          return;
        const selectedFiles = Array.from(e.target.files);
        if (mode === "manual") {
          setFiles(selectedFiles);
          setIsManualTriggerDisplayed(true);
          return;
        }
        const input = "input" in $props ? $props.input : void 0;
        void startUpload(selectedFiles, input);
      },
      disabled: $props.__internal_button_disabled ?? !ready,
      ...!($props.__internal_button_disabled ?? !ready) ? { tabIndex: 0 } : {}
    };
  };
  const styleFieldArg = {
    ready,
    isUploading: $props.__internal_state === "uploading" || isUploading,
    uploadProgress,
    fileTypes
  };
  const state = (() => {
    if ($props.__internal_state)
      return $props.__internal_state;
    if (!ready)
      return "readying";
    if (ready && !isUploading)
      return "ready";
    return "uploading";
  })();
  const renderClearButton = () => {
    var _a2, _b2, _c2;
    return /* @__PURE__ */ jsx2(
      "button",
      {
        onClick: () => {
          setFiles([]);
          setIsManualTriggerDisplayed(false);
          if (fileInputRef.current) {
            fileInputRef.current.value = "";
          }
        },
        className: twMerge(
          "h-[1.25rem] cursor-pointer rounded border-none bg-transparent text-gray-500 transition-colors hover:bg-slate-200 hover:text-gray-600",
          styleFieldToClassName((_a2 = $props.appearance) == null ? void 0 : _a2.clearBtn, styleFieldArg)
        ),
        style: styleFieldToCssObject((_b2 = $props.appearance) == null ? void 0 : _b2.clearBtn, styleFieldArg),
        "data-state": state,
        "data-ut-element": "clear-btn",
        children: contentFieldToContent((_c2 = $props.content) == null ? void 0 : _c2.clearBtn, styleFieldArg) ?? "Clear"
      }
    );
  };
  const renderAllowedContent = () => {
    var _a2, _b2, _c2;
    return /* @__PURE__ */ jsx2(
      "div",
      {
        className: twMerge(
          "h-[1.25rem]  text-xs leading-5 text-gray-600",
          styleFieldToClassName((_a2 = $props.appearance) == null ? void 0 : _a2.allowedContent, styleFieldArg)
        ),
        style: styleFieldToCssObject(
          (_b2 = $props.appearance) == null ? void 0 : _b2.allowedContent,
          styleFieldArg
        ),
        "data-state": state,
        "data-ut-element": "allowed-content",
        children: contentFieldToContent((_c2 = $props.content) == null ? void 0 : _c2.allowedContent, styleFieldArg) ?? allowedContentTextLabelGenerator(permittedFileInfo == null ? void 0 : permittedFileInfo.config)
      }
    );
  };
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: twMerge(
        "flex flex-col items-center justify-center gap-1",
        $props.className,
        styleFieldToClassName((_a = $props.appearance) == null ? void 0 : _a.container, styleFieldArg)
      ),
      style: styleFieldToCssObject((_b = $props.appearance) == null ? void 0 : _b.container, styleFieldArg),
      "data-state": state,
      children: [
        /* @__PURE__ */ jsxs(
          "label",
          {
            className: twMerge(
              "relative flex h-10 w-36 cursor-pointer items-center justify-center overflow-hidden rounded-md text-white after:transition-[width] after:duration-500 focus-within:ring-2 focus-within:ring-blue-600 focus-within:ring-offset-2",
              state === "readying" && "cursor-not-allowed bg-blue-400",
              state === "uploading" && `bg-blue-400 after:absolute after:left-0 after:h-full after:bg-blue-600 after:content-[''] ${progressWidths[uploadProgress]}`,
              state === "ready" && "bg-blue-600",
              styleFieldToClassName((_c = $props.appearance) == null ? void 0 : _c.button, styleFieldArg)
            ),
            style: styleFieldToCssObject((_d = $props.appearance) == null ? void 0 : _d.button, styleFieldArg),
            "data-state": state,
            "data-ut-element": "button",
            tabIndex: 0,
            ref: labelRef,
            onClick: (e) => {
              if (isManualTriggerDisplayed) {
                e.preventDefault();
                e.stopPropagation();
                const input = "input" in $props ? $props.input : void 0;
                void startUpload(files, input);
              }
            },
            children: [
              /* @__PURE__ */ jsx2("input", { ...getInputProps(), className: "sr-only" }),
              contentFieldToContent((_e = $props.content) == null ? void 0 : _e.button, styleFieldArg) ?? (state === "uploading" ? /* @__PURE__ */ jsx2(Spinner, {}) : getUploadButtonText(fileTypes))
            ]
          }
        ),
        mode === "manual" && files.length > 0 ? renderClearButton() : renderAllowedContent()
      ]
    }
  );
}

// src/components/dropzone.tsx
import { useCallback, useEffect as useEffect2, useState as useState2 } from "react";
import { twMerge as twMerge2 } from "tailwind-merge";
import {
  allowedContentTextLabelGenerator as allowedContentTextLabelGenerator2,
  classNames,
  contentFieldToContent as contentFieldToContent2,
  generateClientDropzoneAccept,
  generatePermittedFileTypes as generatePermittedFileTypes2,
  styleFieldToClassName as styleFieldToClassName2,
  styleFieldToCssObject as styleFieldToCssObject2
} from "uploadthing/client";
import { jsx as jsx3, jsxs as jsxs2 } from "react/jsx-runtime";
function UploadDropzone(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  const $props = props;
  const { mode = "manual", appendOnPaste = false } = $props.config ?? {};
  const useUploadThing = INTERNAL_uploadthingHookGen();
  const [files, setFiles] = useState2([]);
  const [uploadProgressState, setUploadProgress] = useState2(
    $props.__internal_upload_progress ?? 0
  );
  const uploadProgress = $props.__internal_upload_progress ?? uploadProgressState;
  const { startUpload, isUploading, permittedFileInfo } = useUploadThing(
    $props.endpoint,
    {
      onClientUploadComplete: (res) => {
        var _a2;
        setFiles([]);
        (_a2 = $props.onClientUploadComplete) == null ? void 0 : _a2.call($props, res);
        setUploadProgress(0);
      },
      onUploadProgress: (p) => {
        var _a2;
        setUploadProgress(p);
        (_a2 = $props.onUploadProgress) == null ? void 0 : _a2.call($props, p);
      },
      onUploadError: $props.onUploadError,
      onUploadBegin: $props.onUploadBegin
    }
  );
  const { fileTypes } = generatePermittedFileTypes2(permittedFileInfo == null ? void 0 : permittedFileInfo.config);
  const onDrop = useCallback(
    (acceptedFiles) => {
      setFiles(acceptedFiles);
      if (mode === "auto") {
        const input = "input" in $props ? $props.input : void 0;
        void startUpload(acceptedFiles, input);
        return;
      }
    },
    [$props, mode, startUpload]
  );
  const { getRootProps, getInputProps, isDragActive, rootRef } = useDropzone({
    onDrop,
    accept: fileTypes ? generateClientDropzoneAccept(fileTypes) : void 0,
    disabled: $props.__internal_dropzone_disabled
  });
  const ready = $props.__internal_ready ?? ($props.__internal_state === "ready" || fileTypes.length > 0);
  const onUploadClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (!files)
      return;
    const input = "input" in $props ? $props.input : void 0;
    void startUpload(files, input);
  };
  useEffect2(() => {
    const handlePaste = (event) => {
      if (!appendOnPaste)
        return;
      if (document.activeElement !== rootRef.current)
        return;
      const pastedFiles = getFilesFromClipboardEvent(event);
      if (!pastedFiles)
        return;
      setFiles((prev) => [...prev, ...pastedFiles]);
      if (mode === "auto") {
        const input = "input" in $props ? $props.input : void 0;
        void startUpload(files, input);
      }
    };
    window.addEventListener("paste", handlePaste);
    return () => {
      window.removeEventListener("paste", handlePaste);
    };
  }, [startUpload, $props, appendOnPaste, mode, fileTypes, rootRef, files]);
  const styleFieldArg = {
    fileTypes,
    isDragActive,
    isUploading,
    ready,
    uploadProgress
  };
  const state = (() => {
    if ($props.__internal_state)
      return $props.__internal_state;
    if (!ready)
      return "readying";
    if (ready && !isUploading)
      return "ready";
    return "uploading";
  })();
  return /* @__PURE__ */ jsxs2(
    "div",
    {
      className: twMerge2(
        "mt-2 flex flex-col items-center justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10 text-center",
        isDragActive && "bg-blue-600/10",
        $props.className,
        styleFieldToClassName2((_a = $props.appearance) == null ? void 0 : _a.container, styleFieldArg)
      ),
      ...getRootProps(),
      style: styleFieldToCssObject2((_b = $props.appearance) == null ? void 0 : _b.container, styleFieldArg),
      "data-state": state,
      children: [
        contentFieldToContent2((_c = $props.content) == null ? void 0 : _c.uploadIcon, styleFieldArg) ?? /* @__PURE__ */ jsx3(
          "svg",
          {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 20 20",
            className: twMerge2(
              "mx-auto block h-12 w-12 align-middle text-gray-400",
              styleFieldToClassName2((_d = $props.appearance) == null ? void 0 : _d.uploadIcon, styleFieldArg)
            ),
            style: styleFieldToCssObject2(
              (_e = $props.appearance) == null ? void 0 : _e.uploadIcon,
              styleFieldArg
            ),
            "data-ut-element": "upload-icon",
            "data-state": state,
            children: /* @__PURE__ */ jsx3(
              "path",
              {
                fill: "currentColor",
                fillRule: "evenodd",
                d: "M5.5 17a4.5 4.5 0 0 1-1.44-8.765a4.5 4.5 0 0 1 8.302-3.046a3.5 3.5 0 0 1 4.504 4.272A4 4 0 0 1 15 17H5.5Zm3.75-2.75a.75.75 0 0 0 1.5 0V9.66l1.95 2.1a.75.75 0 1 0 1.1-1.02l-3.25-3.5a.75.75 0 0 0-1.1 0l-3.25 3.5a.75.75 0 1 0 1.1 1.02l1.95-2.1v4.59Z",
                clipRule: "evenodd"
              }
            )
          }
        ),
        /* @__PURE__ */ jsxs2(
          "label",
          {
            htmlFor: "file-upload",
            className: twMerge2(
              classNames(
                "relative mt-4 flex w-64 cursor-pointer items-center justify-center text-sm font-semibold leading-6 text-gray-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-blue-600 focus-within:ring-offset-2 hover:text-blue-500",
                ready ? "text-blue-600" : "text-gray-500"
              ),
              styleFieldToClassName2((_f = $props.appearance) == null ? void 0 : _f.label, styleFieldArg)
            ),
            style: styleFieldToCssObject2((_g = $props.appearance) == null ? void 0 : _g.label, styleFieldArg),
            "data-ut-element": "label",
            "data-state": state,
            children: [
              contentFieldToContent2((_h = $props.content) == null ? void 0 : _h.label, styleFieldArg) ?? (ready ? `Choose files or drag and drop` : `Loading...`),
              /* @__PURE__ */ jsx3("input", { className: "sr-only", ...getInputProps() })
            ]
          }
        ),
        /* @__PURE__ */ jsx3(
          "div",
          {
            className: twMerge2(
              "m-0 h-[1.25rem] text-xs leading-5 text-gray-600",
              styleFieldToClassName2(
                (_i = $props.appearance) == null ? void 0 : _i.allowedContent,
                styleFieldArg
              )
            ),
            style: styleFieldToCssObject2(
              (_j = $props.appearance) == null ? void 0 : _j.allowedContent,
              styleFieldArg
            ),
            "data-ut-element": "allowed-content",
            "data-state": state,
            children: contentFieldToContent2((_k = $props.content) == null ? void 0 : _k.allowedContent, styleFieldArg) ?? allowedContentTextLabelGenerator2(permittedFileInfo == null ? void 0 : permittedFileInfo.config)
          }
        ),
        ($props.__internal_show_button ?? files.length > 0) && /* @__PURE__ */ jsx3(
          "button",
          {
            className: twMerge2(
              classNames(
                "relative mt-4 flex h-10 w-36 items-center justify-center overflow-hidden rounded-md text-white after:transition-[width] after:duration-500",
                state === "uploading" ? `bg-blue-400 after:absolute after:left-0 after:h-full after:bg-blue-600 ${progressWidths[uploadProgress]}` : "bg-blue-600"
              ),
              styleFieldToClassName2((_l = $props.appearance) == null ? void 0 : _l.button, styleFieldArg)
            ),
            style: styleFieldToCssObject2(
              (_m = $props.appearance) == null ? void 0 : _m.button,
              styleFieldArg
            ),
            onClick: onUploadClick,
            "data-ut-element": "button",
            "data-state": state,
            disabled: $props.__internal_button_disabled ?? state === "uploading",
            children: contentFieldToContent2((_n = $props.content) == null ? void 0 : _n.button, styleFieldArg) ?? (state === "uploading" ? /* @__PURE__ */ jsx3(Spinner, {}) : `Upload ${files.length} file${files.length === 1 ? "" : "s"}`)
          }
        )
      ]
    }
  );
}

// src/component.tsx
import { Fragment, jsx as jsx4, jsxs as jsxs3 } from "react/jsx-runtime";
function Uploader(props) {
  return /* @__PURE__ */ jsxs3(Fragment, { children: [
    /* @__PURE__ */ jsxs3("div", { className: "flex flex-col items-center justify-center gap-4", children: [
      /* @__PURE__ */ jsx4("span", { className: "text-center text-4xl font-bold", children: `Upload a file using a button:` }),
      /* @__PURE__ */ jsx4(UploadButton, { ...props })
    ] }),
    /* @__PURE__ */ jsxs3("div", { className: "flex flex-col items-center justify-center gap-4", children: [
      /* @__PURE__ */ jsx4("span", { className: "text-center text-4xl font-bold", children: `...or using a dropzone:` }),
      /* @__PURE__ */ jsx4(UploadDropzone, { ...props })
    ] })
  ] });
}
function generateComponents() {
  return {
    UploadButton,
    UploadDropzone,
    Uploader
  };
}
export {
  UploadButton,
  UploadDropzone,
  Uploader,
  generateComponents
};
//# sourceMappingURL=index.mjs.map