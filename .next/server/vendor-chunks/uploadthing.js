"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-5KWT532U.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML)\n/* harmony export */ });\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    // 403 Forbidden\n    EntityTooSmall: \"TOO_SMALL\",\n    // 400 Bad Request\n    EntityTooLarge: \"TOO_LARGE\",\n    // 400 Bad Request\n    ExpiredToken: \"FORBIDDEN\",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    // 400 Bad Request\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    // 500 Internal Server Error\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n //# sourceMappingURL=chunk-5KWT532U.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay01S1dUNTMyVS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGtDQUFrQztBQUNsQyxJQUFJQSx3QkFBd0IsQ0FBQ0M7SUFDM0IsTUFBTUMsWUFBWUQsU0FBU0UsS0FBSyxDQUFDO0lBQ2pDLE1BQU1DLGVBQWVILFNBQVNFLEtBQUssQ0FBQztJQUNwQyxNQUFNRSxPQUFPSCxhQUFhLE9BQU8sS0FBSyxJQUFJQSxTQUFTLENBQUMsRUFBRTtJQUN0RCxNQUFNSSxVQUFVRixnQkFBZ0IsT0FBTyxLQUFLLElBQUlBLFlBQVksQ0FBQyxFQUFFO0lBQy9ELElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxTQUNaLE9BQU87SUFDVCxPQUFPO1FBQUVELE1BQU1FLHVCQUF1QixDQUFDRixLQUFLLElBQUlHO1FBQW9CRjtJQUFRO0FBQzlFO0FBQ0EsSUFBSUUscUJBQXFCO0FBQ3pCLElBQUlELDBCQUEwQjtJQUM1QkUsY0FBYztJQUNkLGdCQUFnQjtJQUNoQkMsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQkMsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQkMsY0FBYztJQUNkLGtCQUFrQjtJQUNsQkMscUNBQXFDO0lBQ3JDLGtCQUFrQjtJQUNsQkMsZUFBZTtJQUNmLDRCQUE0QjtJQUM1QkMsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQkMsMEJBQTBCO0FBRTVCO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlYWRzLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstNUtXVDUzMlUubWpzP2JlOTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL3MzLWVycm9yLXBhcnNlci50c1xudmFyIG1heWJlUGFyc2VSZXNwb25zZVhNTCA9IChtYXliZVhtbCkgPT4ge1xuICBjb25zdCBjb2RlTWF0Y2ggPSBtYXliZVhtbC5tYXRjaCgvPENvZGU+KC4qPyk8XFwvQ29kZT4vcyk7XG4gIGNvbnN0IG1lc3NhZ2VNYXRjaCA9IG1heWJlWG1sLm1hdGNoKC88TWVzc2FnZT4oLio/KTxcXC9NZXNzYWdlPi9zKTtcbiAgY29uc3QgY29kZSA9IGNvZGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogY29kZU1hdGNoWzFdO1xuICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBtZXNzYWdlTWF0Y2hbMV07XG4gIGlmICghY29kZSB8fCAhbWVzc2FnZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHsgY29kZTogczNDb2RlVG9VcGxvYWRUaGluZ0NvZGVbY29kZV0gPz8gREVGQVVMVF9FUlJPUl9DT0RFLCBtZXNzYWdlIH07XG59O1xudmFyIERFRkFVTFRfRVJST1JfQ09ERSA9IFwiVVBMT0FEX0ZBSUxFRFwiO1xudmFyIHMzQ29kZVRvVXBsb2FkVGhpbmdDb2RlID0ge1xuICBBY2Nlc3NEZW5pZWQ6IFwiRk9SQklEREVOXCIsXG4gIC8vIDQwMyBGb3JiaWRkZW5cbiAgRW50aXR5VG9vU21hbGw6IFwiVE9PX1NNQUxMXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBFbnRpdHlUb29MYXJnZTogXCJUT09fTEFSR0VcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEV4cGlyZWRUb2tlbjogXCJGT1JCSURERU5cIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEluY29ycmVjdE51bWJlck9mRmlsZXNJblBvc3RSZXF1ZXN0OiBcIlRPT19NQU5ZX0ZJTEVTXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBJbnRlcm5hbEVycm9yOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAvLyA1MDAgSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gIEtleVRvb0xvbmdFcnJvcjogXCJLRVlfVE9PX0xPTkdcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIE1heE1lc3NhZ2VMZW5ndGhFeGNlZWRlZDogXCJUT09fTEFSR0VcIlxuICAvLyA0MDAgQmFkIFJlcXVlc3Rcbn07XG5cbmV4cG9ydCB7XG4gIG1heWJlUGFyc2VSZXNwb25zZVhNTFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLTVLV1Q1MzJVLm1qcy5tYXAiXSwibmFtZXMiOlsibWF5YmVQYXJzZVJlc3BvbnNlWE1MIiwibWF5YmVYbWwiLCJjb2RlTWF0Y2giLCJtYXRjaCIsIm1lc3NhZ2VNYXRjaCIsImNvZGUiLCJtZXNzYWdlIiwiczNDb2RlVG9VcGxvYWRUaGluZ0NvZGUiLCJERUZBVUxUX0VSUk9SX0NPREUiLCJBY2Nlc3NEZW5pZWQiLCJFbnRpdHlUb29TbWFsbCIsIkVudGl0eVRvb0xhcmdlIiwiRXhwaXJlZFRva2VuIiwiSW5jb3JyZWN0TnVtYmVyT2ZGaWxlc0luUG9zdFJlcXVlc3QiLCJJbnRlcm5hbEVycm9yIiwiS2V5VG9vTG9uZ0Vycm9yIiwiTWF4TWVzc2FnZUxlbmd0aEV4Y2VlZGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UPLOADTHING_VERSION: () => (/* binding */ UPLOADTHING_VERSION),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES),\n/* harmony export */   buildPermissionsInfoHandler: () => (/* binding */ buildPermissionsInfoHandler),\n/* harmony export */   buildRequestHandler: () => (/* binding */ buildRequestHandler),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   defaultErrorFormatter: () => (/* binding */ defaultErrorFormatter),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   unsetMarker: () => (/* binding */ unsetMarker)\n/* harmony export */ });\n/* harmony import */ var _chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-T2XS27LC.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n// package.json\nvar require_package = (0,_chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"package.json\" (exports, module) {\n        module.exports = {\n            name: \"uploadthing\",\n            version: \"5.7.4\",\n            engines: {\n                node: \">=18.13.0\"\n            },\n            license: \"MIT\",\n            exports: {\n                \"./package.json\": \"./package.json\",\n                \"./client\": {\n                    types: \"./dist/client.d.ts\",\n                    import: \"./dist/client.mjs\",\n                    require: \"./dist/client.js\"\n                },\n                \"./server\": {\n                    types: \"./dist/server.d.ts\",\n                    import: \"./dist/server.mjs\",\n                    require: \"./dist/server.js\"\n                },\n                \"./next\": {\n                    types: \"./dist/next.d.ts\",\n                    import: \"./dist/next.mjs\",\n                    require: \"./dist/next.js\"\n                },\n                \"./next-legacy\": {\n                    types: \"./dist/next-legacy.d.ts\",\n                    import: \"./dist/next-legacy.mjs\",\n                    require: \"./dist/next-legacy.js\"\n                },\n                \"./express\": {\n                    import: \"./dist/express.mjs\",\n                    types: \"./dist/express.d.ts\",\n                    require: \"./dist/express.js\"\n                },\n                \"./tw\": {\n                    types: \"./dist/tw.d.ts\",\n                    import: \"./dist/tw.mjs\",\n                    require: \"./dist/tw.js\"\n                },\n                \"./fastify\": {\n                    types: \"./dist/fastify.d.ts\",\n                    import: \"./dist/fastify.mjs\",\n                    require: \"./dist/fastify.js\"\n                },\n                \"./h3\": {\n                    types: \"./dist/h3.d.ts\",\n                    import: \"./dist/h3.mjs\",\n                    require: \"./dist/h3.js\"\n                }\n            },\n            files: [\n                \"dist\"\n            ],\n            publishConfig: {\n                access: \"public\"\n            },\n            typesVersions: {\n                \"*\": {\n                    client: [\n                        \"dist/client.d.ts\"\n                    ],\n                    server: [\n                        \"dist/server.d.ts\"\n                    ],\n                    next: [\n                        \"dist/next.d.ts\"\n                    ],\n                    \"next-legacy\": [\n                        \"dist/next-legacy.d.ts\"\n                    ],\n                    tw: [\n                        \"dist/tw.d.ts\"\n                    ],\n                    express: [\n                        \"dist/express.d.ts\"\n                    ],\n                    fastify: [\n                        \"dist/fastify.d.ts\"\n                    ],\n                    h3: [\n                        \"dist/h3.d.ts\"\n                    ]\n                }\n            },\n            scripts: {\n                lint: 'eslint \"**/*.{ts,tsx}\" --max-warnings 0',\n                build: \"tsup\",\n                clean: \"git clean -xdf dist node_modules\",\n                dev: \"tsup --watch\",\n                test: \"vitest run\",\n                \"test:watch\": \"vitest\",\n                typecheck: \"tsc --noEmit\"\n            },\n            dependencies: {\n                \"@uploadthing/mime-types\": \"^0.2.2\",\n                \"@uploadthing/shared\": \"^5.2.7\"\n            },\n            devDependencies: {\n                \"@types/express\": \"^4.17.17\",\n                \"@types/react\": \"18.2.33\",\n                \"@uploadthing/eslint-config\": \"0.2.0\",\n                \"@uploadthing/tsconfig\": \"0.1.0\",\n                \"@uploadthing/tsup-config\": \"0.1.0\",\n                eslint: \"^8.47.0\",\n                express: \"^4.18.2\",\n                fastify: \"^4.23.2\",\n                h3: \"^1.8.1\",\n                next: \"14.0.1\",\n                \"solid-js\": \"^1.7.11\",\n                tailwindcss: \"^3.3.2\",\n                tsup: \"6.7.0\",\n                \"type-fest\": \"^3.11.1\",\n                typescript: \"^5.1.6\",\n                undici: \"^5.20.0\",\n                vitest: \"^0.30.1\",\n                zod: \"^3.22.3\"\n            },\n            eslintConfig: {\n                root: true,\n                extends: [\n                    \"@uploadthing/eslint-config/base\"\n                ]\n            }\n        };\n    }\n});\n// src/constants.ts\nvar packageJson = require_package();\nif (!packageJson.version) throw new Error(\"no version found in package.json\");\nvar UPLOADTHING_VERSION = packageJson.version;\n// src/internal/error-formatter.ts\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    var _a;\n    const errorFormatter = ((_a = router[Object.keys(router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;\n    return errorFormatter(error);\n}\n// src/internal/types.ts\nvar unsetMarker = \"unsetMarker\";\nvar VALID_ACTION_TYPES = [\n    \"upload\",\n    \"failure\"\n];\n// src/internal/handler.ts\n\n// src/internal/dev-hook.ts\n\nvar isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nvar conditionalDevServer = async (fileKey)=>{\n    if (false) {}\n    const fileData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.pollForFileData)(fileKey, async (json)=>{\n        const file = json.fileData;\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n        const response = await fetch(callbackUrl, {\n            method: \"POST\",\n            body: JSON.stringify({\n                status: \"uploaded\",\n                metadata: JSON.parse(file.metadata ?? \"{}\"),\n                file: {\n                    url: `https://utfs.io/f/${encodeURIComponent(fileKey)}`,\n                    key: fileKey,\n                    name: file.fileName,\n                    size: file.fileSize\n                }\n            }),\n            headers: {\n                \"uploadthing-hook\": \"callback\"\n            }\n        });\n        if (isValidResponse(response)) {\n            console.log(\"[UT] Successfully simulated callback for file\", fileKey);\n        } else {\n            console.error(\"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\", fileKey);\n        }\n        return file;\n    });\n    if (fileData !== null) return fileData;\n    console.error(`[UT] Failed to simulate callback for file ${fileKey}`);\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"File took too long to upload\"\n    });\n};\n// src/internal/parser.ts\nfunction getParseFn(parser) {\n    if (typeof parser.parse === \"function\") {\n        return parser.parse;\n    }\n    throw new Error(\"Invalid parser\");\n}\n// src/internal/handler.ts\nvar fileCountLimitHit = (files, routeConfig)=>{\n    var _a;\n    const counts = {};\n    files.forEach((file)=>{\n        const type = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getTypeFromFileName)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.objectKeys)(routeConfig));\n        if (!counts[type]) {\n            counts[type] = 1;\n        } else {\n            counts[type] += 1;\n        }\n    });\n    for(const _key in counts){\n        const key = _key;\n        const count = counts[key];\n        const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;\n        if (!limit) {\n            console.error(routeConfig, key);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid config during file count\",\n                cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`\n            });\n        }\n        if (count > limit) {\n            return {\n                limitHit: true,\n                type: key,\n                limit,\n                count\n            };\n        }\n    }\n    return {\n        limitHit: false\n    };\n};\nvar getHeader = (req, key)=>{\n    if (req.headers instanceof Headers) {\n        return req.headers.get(key);\n    }\n    return req.headers[key];\n};\nvar buildRequestHandler = (opts)=>{\n    return async (input)=>{\n        if (true) {\n            console.log(\"[UT] UploadThing dev server is now running!\");\n        }\n        const { req, res, event } = input;\n        const { router, config } = opts;\n        const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;\n        const params = new URL(req.url ?? \"\", (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getUploadthingUrl)()).searchParams;\n        const uploadthingHook = getHeader(req, \"uploadthing-hook\") ?? void 0;\n        const slug = params.get(\"slug\") ?? void 0;\n        const actionType = params.get(\"actionType\") ?? void 0;\n        if (!slug) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No slug provided\"\n        });\n        if (slug && typeof slug !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`slug` must be a string\",\n                cause: `Expected slug to be of type 'string', got '${typeof slug}'`\n            });\n        }\n        if (actionType && typeof actionType !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`actionType` must be a string\",\n                cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`\n            });\n        }\n        if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`uploadthingHook` must be a string\",\n                cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`\n            });\n        }\n        if (!preferredOrEnvSecret) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,\n                cause: \"No secret provided\"\n            });\n        }\n        const uploadable = router[slug];\n        if (!uploadable) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: `No file route found for slug ${slug}`\n            });\n        }\n        if (uploadthingHook === \"callback\") {\n            const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n            if (maybeReqBody instanceof Error) {\n                return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid request body\",\n                    cause: maybeReqBody\n                });\n            }\n            await uploadable.resolver({\n                file: maybeReqBody.file,\n                metadata: maybeReqBody.metadata\n            });\n            return {\n                status: 200\n            };\n        }\n        if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid action type ${actionType}`,\n                message: `Expected ${VALID_ACTION_TYPES.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${\"a\"}\"`\n            });\n        }\n        switch(actionType){\n            case \"upload\":\n                {\n                    const maybeInput = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeInput instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeInput\n                        });\n                    }\n                    const { files, input: userInput } = maybeInput;\n                    let parsedInput = {};\n                    try {\n                        const inputParser = uploadable._def.inputParser;\n                        parsedInput = await getParseFn(inputParser)(userInput);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid input.\",\n                            cause: error\n                        });\n                    }\n                    let metadata = {};\n                    try {\n                        metadata = await uploadable._def.middleware({\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            req,\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            res,\n                            event,\n                            input: parsedInput\n                        });\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run middleware.\",\n                            cause: error\n                        });\n                    }\n                    if (!Array.isArray(files) || !files.every((f)=>typeof f === \"string\")) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: \"Files must be a string array\",\n                        cause: `Expected files to be of type 'string[]', got '${JSON.stringify(files)}'`\n                    });\n                    let parsedConfig;\n                    try {\n                        parsedConfig = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(uploadable._def.routerConfig);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    try {\n                        const { limitHit, count, limit, type } = fileCountLimitHit(files, parsedConfig);\n                        if (limitHit) {\n                            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                                code: \"BAD_REQUEST\",\n                                message: \"File limit exceeded\",\n                                cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`\n                            });\n                        }\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    const uploadthingApiResponse = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(\"/api/prepareUpload\"), {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            files,\n                            routeConfig: parsedConfig,\n                            metadata,\n                            callbackUrl: (config == null ? void 0 : config.callbackUrl) ?? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getUploadthingUrl)(),\n                            callbackSlug: slug\n                        }),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"x-uploadthing-api-key\": preferredOrEnvSecret,\n                            \"x-uploadthing-version\": UPLOADTHING_VERSION\n                        }\n                    });\n                    const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(uploadthingApiResponse);\n                    if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n                        console.error(\"[UT] unable to get presigned urls\");\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    if (true) {\n                        for (const file of parsedResponse){\n                            void conditionalDevServer(file.key);\n                        }\n                    }\n                    return {\n                        body: parsedResponse,\n                        status: 200\n                    };\n                }\n            case \"failure\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const { fileKey } = maybeReqBody;\n                    const uploadthingApiResponse = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(\"/api/failureCallback\"), {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            fileKey\n                        }),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"x-uploadthing-api-key\": preferredOrEnvSecret,\n                            \"x-uploadthing-version\": UPLOADTHING_VERSION\n                        }\n                    });\n                    if (!uploadthingApiResponse.ok) {\n                        console.error(\"[UT] failed to mark upload as failed\");\n                        const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(uploadthingApiResponse);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    try {\n                        uploadable._def.onUploadError({\n                            error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                                code: \"UPLOAD_FAILED\",\n                                message: `Upload failed for ${fileKey}`\n                            }),\n                            fileKey\n                        });\n                    } catch (error) {\n                        console.error(\"[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\");\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run onUploadError callback\",\n                            cause: error\n                        });\n                    }\n                    return {\n                        status: 200\n                    };\n                }\n            default:\n                {\n                    return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: `Invalid action type`\n                    });\n                }\n        }\n    };\n};\nvar buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const r = opts.router;\n        const permissions = Object.keys(r).map((k)=>{\n            const route = r[k];\n            const config = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(route._def.routerConfig);\n            return {\n                slug: k,\n                config\n            };\n        });\n        return permissions;\n    };\n};\n// src/internal/upload-builder.ts\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>({}),\n            _input: {},\n            _output: {}\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n //# sourceMappingURL=chunk-BPTHKJTK.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-F3SNDKZQ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-F3SNDKZQ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig),\n/* harmony export */   utapi: () => (/* binding */ utapi)\n/* harmony export */ });\n/* harmony import */ var _chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5KWT532U.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-BPTHKJTK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/server.ts\n\n// src/sdk/index.ts\n\n// src/sdk/utils.ts\n\nfunction guardServerOnly() {\n    if (false) {}\n}\nfunction getApiKeyOrThrow(apiKey) {\n    if (apiKey) return apiKey;\n    if (process.env.UPLOADTHING_SECRET) return process.env.UPLOADTHING_SECRET;\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n        code: \"MISSING_ENV\",\n        message: \"Missing `UPLOADTHING_SECRET` env variable.\"\n    });\n}\nvar uploadFilesInternal = async (data, opts)=>{\n    const fileData = data.files.map((file)=>({\n            name: file.name ?? \"unnamed-blob\",\n            type: file.type,\n            size: file.size\n        }));\n    const res = await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/uploadFiles\"), {\n        method: \"POST\",\n        headers: opts.utRequestHeaders,\n        cache: \"no-store\",\n        body: JSON.stringify({\n            files: fileData,\n            metadata: data.metadata,\n            contentDisposition: data.contentDisposition\n        })\n    });\n    if (!res.ok) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(res);\n        throw error;\n    }\n    const clonedRes = res.clone();\n    const json = await res.json();\n    if (\"error\" in json) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(clonedRes);\n        throw error;\n    }\n    const uploads = await Promise.allSettled(data.files.map(async (file, i)=>{\n        const { presignedUrl, fields, key, fileUrl } = json.data[i];\n        if (!presignedUrl || !fields) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"URL_GENERATION_FAILED\",\n                message: \"Failed to generate presigned URL\",\n                cause: JSON.stringify(json.data[i])\n            });\n        }\n        const formData = new FormData();\n        formData.append(\"Content-Type\", file.type);\n        Object.entries(fields).forEach(([key2, value])=>{\n            formData.append(key2, value);\n        });\n        formData.append(\"file\", // Handles case when there is no file name\n        file.name ? file : Object.assign(file, {\n            name: \"unnamed-blob\"\n        }));\n        const s3res = await opts.fetch(presignedUrl, {\n            method: \"POST\",\n            body: formData,\n            headers: new Headers({\n                Accept: \"application/xml\"\n            })\n        });\n        if (!s3res.ok) {\n            await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/failureCallback\"), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    fileKey: fields.key\n                }),\n                headers: opts.utRequestHeaders\n            });\n            const text = await s3res.text();\n            const parsed = (0,_chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(text);\n            if (parsed == null ? void 0 : parsed.message) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                    code: \"UPLOAD_FAILED\",\n                    message: parsed.message\n                });\n            }\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Failed to upload file to storage provider\",\n                cause: s3res\n            });\n        }\n        await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.pollForFileData)(key);\n        return {\n            key,\n            url: fileUrl,\n            name: file.name,\n            size: file.size\n        };\n    }));\n    return uploads.map((upload)=>{\n        if (upload.status === \"fulfilled\") {\n            const data2 = upload.value;\n            return {\n                data: data2,\n                error: null\n            };\n        }\n        const reason = upload.reason;\n        const error = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.toObject(reason);\n        return {\n            data: null,\n            error\n        };\n    });\n};\n// src/sdk/index.ts\nvar UTApi = class {\n    constructor(opts){\n        this.fetch = (opts == null ? void 0 : opts.fetch) ?? globalThis.fetch;\n        this.apiKey = (opts == null ? void 0 : opts.apiKey) ?? process.env.UPLOADTHING_SECRET;\n        this.defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            \"x-uploadthing-api-key\": this.apiKey,\n            \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        };\n    }\n    async requestUploadThing(pathname, body, fallbackErrorMessage) {\n        getApiKeyOrThrow();\n        const res = await this.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(pathname), {\n            method: \"POST\",\n            cache: \"no-store\",\n            headers: this.defaultHeaders,\n            body: JSON.stringify(body)\n        });\n        const json = await res.json();\n        if (!res.ok || \"error\" in json) {\n            console.error(\"[UT] Error:\", json);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"error\" in json && typeof json.error === \"string\" ? json.error : fallbackErrorMessage\n            });\n        }\n        return json;\n    }\n    /**\n   * @param {FileEsque | FileEsque[]} files The file(s) to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */ async uploadFiles(files, metadata = {}, contentDisposition = \"inline\") {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        const filesToUpload = Array.isArray(files) ? files : [\n            files\n        ];\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata,\n            contentDisposition\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */ async uploadFilesFromUrl(urls, metadata = {}, contentDisposition = \"inline\") {\n        guardServerOnly();\n        const fileUrls = Array.isArray(urls) ? urls : [\n            urls\n        ];\n        const formData = new FormData();\n        formData.append(\"metadata\", JSON.stringify(metadata));\n        const filesToUpload = await Promise.all(fileUrls.map(async (url)=>{\n            if (typeof url === \"string\") url = new URL(url);\n            const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n            const fileResponse = await fetch(url);\n            if (!fileResponse.ok) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Failed to download requested file.\",\n                    cause: fileResponse\n                });\n            }\n            const blob = await fileResponse.blob();\n            return Object.assign(blob, {\n                name: filename\n            });\n        }));\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata,\n            contentDisposition\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   */ async deleteFiles(fileKeys) {\n        guardServerOnly();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        return this.requestUploadThing(\"/api/deleteFile\", {\n            fileKeys\n        }, \"An unknown error occured while deleting files.\");\n    }\n    /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */ async getFileUrls(fileKeys) {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        const json = await this.requestUploadThing(\"/api/getFileUrl\", {\n            fileKeys\n        }, \"An unknown error occured while retrieving file URLs.\");\n        return json.data;\n    }\n    /**\n   * Request file list from UploadThing storage.\n   *\n   * @example\n   * const data = await listFiles();\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */ async listFiles() {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        const json = await this.requestUploadThing(\"/api/listFiles\", {}, \"An unknown error occured while listing files.\");\n        return json.files;\n    }\n    async renameFile(updates) {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        if (!Array.isArray(updates)) updates = [\n            updates\n        ];\n        return this.requestUploadThing(\"/api/renameFile\", {\n            updates\n        }, \"An unknown error occured while renaming files.\");\n    }\n    async getUsageInfo() {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        return this.requestUploadThing(\"/api/getUsageInfo\", {}, \"An unknown error occured while getting usage info.\");\n    }\n};\nvar utapi = new UTApi();\n// src/server.ts\nvar createUploadthing = (opts)=>(0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.createBuilder)(opts);\nvar createServerHandler = (opts)=>{\n    (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n    const requestHandler = (0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.buildRequestHandler)(opts);\n    const POST = async (request)=>{\n        const req = request instanceof Request ? request : request.request;\n        const response = await requestHandler({\n            req\n        });\n        if (response instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError) {\n            return new Response(JSON.stringify((0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.formatError)(response, opts.router)), {\n                status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.getStatusCodeFromError)(response),\n                headers: {\n                    \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        if (response.status !== 200) {\n            return new Response(\"An unknown error occured\", {\n                status: 500,\n                headers: {\n                    \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        return new Response(JSON.stringify(response.body), {\n            status: response.status,\n            headers: {\n                \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    const getBuildPerms = (0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)(opts);\n    const GET = (request)=>{\n        const _req = request instanceof Request ? request : request.request;\n        return new Response(JSON.stringify(getBuildPerms()), {\n            status: 200,\n            headers: {\n                \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\nvar extractRouterConfig = (router)=>(0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)({\n        router\n    })();\n //# sourceMappingURL=chunk-F3SNDKZQ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-F3SNDKZQ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __require: () => (/* binding */ __require),\n/* harmony export */   __toESM: () => (/* binding */ __toESM)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __require = /* @__PURE__ */ ((x)=>typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n        get: (a, b)=>(typeof require !== \"undefined\" ? require : a)[b]\n    }) : x)(function(x) {\n    if (typeof require !== \"undefined\") return require.apply(this, arguments);\n    throw new Error('Dynamic require of \"' + x + '\" is not supported');\n});\nvar __commonJS = (cb, mod)=>function __require2() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n //# sourceMappingURL=chunk-T2XS27LC.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1UMlhTMjdMQy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsV0FBV0MsT0FBT0MsTUFBTTtBQUM1QixJQUFJQyxZQUFZRixPQUFPRyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkosT0FBT0ssd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQk4sT0FBT08sbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVSLE9BQU9TLGNBQWM7QUFDeEMsSUFBSUMsZUFBZVYsT0FBT1csU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFlBQTRCLGFBQUgsR0FBSSxFQUFDQyxJQUFNLE9BQU9DLFlBQVksY0FBY0EsVUFBVSxPQUFPQyxVQUFVLGNBQWMsSUFBSUEsTUFBTUYsR0FBRztRQUM3SEcsS0FBSyxDQUFDQyxHQUFHQyxJQUFNLENBQUMsT0FBT0osWUFBWSxjQUFjQSxVQUFVRyxDQUFBQSxDQUFFLENBQUNDLEVBQUU7SUFDbEUsS0FBS0wsQ0FBQUEsRUFBRyxTQUFTQSxDQUFDO0lBQ2hCLElBQUksT0FBT0MsWUFBWSxhQUNyQixPQUFPQSxRQUFRSyxLQUFLLENBQUMsSUFBSSxFQUFFQztJQUM3QixNQUFNLElBQUlDLE1BQU0seUJBQXlCUixJQUFJO0FBQy9DO0FBQ0EsSUFBSVMsYUFBYSxDQUFDQyxJQUFJQyxNQUFRLFNBQVNDO1FBQ3JDLE9BQU9ELE9BQU8sQ0FBQyxHQUFHRCxFQUFFLENBQUNsQixrQkFBa0JrQixHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQ0MsTUFBTTtZQUFFRSxTQUFTLENBQUM7UUFBRSxHQUFHQSxPQUFPLEVBQUVGLE1BQU1BLElBQUlFLE9BQU87SUFDcEc7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU8zQixrQkFBa0J3QixNQUNoQyxJQUFJLENBQUNwQixhQUFhd0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6QzdCLFVBQVUyQixJQUFJSSxLQUFLO1lBQUVoQixLQUFLLElBQU1hLElBQUksQ0FBQ0csSUFBSTtZQUFFRSxZQUFZLENBQUVILENBQUFBLE9BQU81QixpQkFBaUIwQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtHLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9OO0FBQ1Q7QUFDQSxJQUFJTyxVQUFVLENBQUNYLEtBQUtZLFlBQVlDLFNBQVlBLENBQUFBLFNBQVNiLE9BQU8sT0FBTzFCLFNBQVNTLGFBQWFpQixRQUFRLENBQUMsR0FBR0csWUFDbkcsc0VBQXNFO0lBQ3RFLGlFQUFpRTtJQUNqRSxzRUFBc0U7SUFDdEUscUVBQXFFO0lBQ3JFUyxjQUFjLENBQUNaLE9BQU8sQ0FBQ0EsSUFBSWMsVUFBVSxHQUFHckMsVUFBVW9DLFFBQVEsV0FBVztRQUFFRSxPQUFPZjtRQUFLVSxZQUFZO0lBQUssS0FBS0csUUFDekdiLElBQ0Y7QUFNRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVhZHMvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1UMlhTMjdMQy5tanM/MTU4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcmVxdWlyZSA9IC8qIEBfX1BVUkVfXyAqLyAoKHgpID0+IHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiID8gcmVxdWlyZSA6IHR5cGVvZiBQcm94eSAhPT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBQcm94eSh4LCB7XG4gIGdldDogKGEsIGIpID0+ICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVpcmUgOiBhKVtiXVxufSkgOiB4KShmdW5jdGlvbih4KSB7XG4gIGlmICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm4gcmVxdWlyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZSBvZiBcIicgKyB4ICsgJ1wiIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn0pO1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlMigpIHtcbiAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcblxuZXhwb3J0IHtcbiAgX19yZXF1aXJlLFxuICBfX2NvbW1vbkpTLFxuICBfX3RvRVNNXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstVDJYUzI3TEMubWpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX3JlcXVpcmUiLCJ4IiwicmVxdWlyZSIsIlByb3h5IiwiZ2V0IiwiYSIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsIkVycm9yIiwiX19jb21tb25KUyIsImNiIiwibW9kIiwiX19yZXF1aXJlMiIsImV4cG9ydHMiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiZW51bWVyYWJsZSIsIl9fdG9FU00iLCJpc05vZGVNb2RlIiwidGFyZ2V0IiwiX19lc01vZHVsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   incompatibleNodeGuard: () => (/* binding */ incompatibleNodeGuard)\n/* harmony export */ });\n// src/internal/incompat-node-guard.ts\nfunction incompatibleNodeGuard() {\n    var _a, _b, _c, _d;\n    if (typeof process === \"undefined\") return;\n    let major;\n    let minor;\n    const maybeNodeVersion = (_b = (_a = process.versions) == null ? void 0 : _a.node) == null ? void 0 : _b.split(\".\");\n    if (maybeNodeVersion) {\n        [major, minor] = maybeNodeVersion.map((v)=>parseInt(v, 10));\n    }\n    const maybeNodePath = (_c = process.env) == null ? void 0 : _c.NODE;\n    if (!major && maybeNodePath) {\n        const nodeVersion = (_d = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)) == null ? void 0 : _d[0];\n        if (nodeVersion) {\n            [major, minor] = nodeVersion.substring(1).split(\".\").map((v)=>parseInt(v, 10));\n        }\n    }\n    if (!major || !minor) return;\n    if (major > 18) return;\n    if (major === 18 && minor >= 13) return;\n    console.error(`[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`);\n    process.exit(1);\n}\n //# sourceMappingURL=chunk-WPSY3MFJ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1XUFNZM01GSi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNDQUFzQztBQUN0QyxTQUFTQTtJQUNQLElBQUlDLElBQUlDLElBQUlDLElBQUlDO0lBQ2hCLElBQUksT0FBT0MsWUFBWSxhQUNyQjtJQUNGLElBQUlDO0lBQ0osSUFBSUM7SUFDSixNQUFNQyxtQkFBbUIsQ0FBQ04sS0FBSyxDQUFDRCxLQUFLSSxRQUFRSSxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUlSLEdBQUdTLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSVIsR0FBR1MsS0FBSyxDQUFDO0lBQy9HLElBQUlILGtCQUFrQjtRQUNwQixDQUFDRixPQUFPQyxNQUFNLEdBQUdDLGlCQUFpQkksR0FBRyxDQUFDLENBQUNDLElBQU1DLFNBQVNELEdBQUc7SUFDM0Q7SUFDQSxNQUFNRSxnQkFBZ0IsQ0FBQ1osS0FBS0UsUUFBUVcsR0FBRyxLQUFLLE9BQU8sS0FBSyxJQUFJYixHQUFHYyxJQUFJO0lBQ25FLElBQUksQ0FBQ1gsU0FBU1MsZUFBZTtRQUMzQixNQUFNRyxjQUFjLENBQUNkLEtBQUssdUJBQXVCZSxJQUFJLENBQUNKLGNBQWEsS0FBTSxPQUFPLEtBQUssSUFBSVgsRUFBRSxDQUFDLEVBQUU7UUFDOUYsSUFBSWMsYUFBYTtZQUNmLENBQUNaLE9BQU9DLE1BQU0sR0FBR1csWUFBWUUsU0FBUyxDQUFDLEdBQUdULEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUMsU0FBU0QsR0FBRztRQUM5RTtJQUNGO0lBQ0EsSUFBSSxDQUFDUCxTQUFTLENBQUNDLE9BQ2I7SUFDRixJQUFJRCxRQUFRLElBQ1Y7SUFDRixJQUFJQSxVQUFVLE1BQU1DLFNBQVMsSUFDM0I7SUFDRmMsUUFBUUMsS0FBSyxDQUNYLENBQUMsOEJBQThCLEVBQUVoQixNQUFNLENBQUMsRUFBRUMsTUFBTSwrRUFBK0UsQ0FBQztJQUVsSUYsUUFBUWtCLElBQUksQ0FBQztBQUNmO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlYWRzLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstV1BTWTNNRkoubWpzPzdiNTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL2luY29tcGF0LW5vZGUtZ3VhcmQudHNcbmZ1bmN0aW9uIGluY29tcGF0aWJsZU5vZGVHdWFyZCgpIHtcbiAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgcmV0dXJuO1xuICBsZXQgbWFqb3I7XG4gIGxldCBtaW5vcjtcbiAgY29uc3QgbWF5YmVOb2RlVmVyc2lvbiA9IChfYiA9IChfYSA9IHByb2Nlc3MudmVyc2lvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5ub2RlKSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc3BsaXQoXCIuXCIpO1xuICBpZiAobWF5YmVOb2RlVmVyc2lvbikge1xuICAgIFttYWpvciwgbWlub3JdID0gbWF5YmVOb2RlVmVyc2lvbi5tYXAoKHYpID0+IHBhcnNlSW50KHYsIDEwKSk7XG4gIH1cbiAgY29uc3QgbWF5YmVOb2RlUGF0aCA9IChfYyA9IHByb2Nlc3MuZW52KSA9PSBudWxsID8gdm9pZCAwIDogX2MuTk9ERTtcbiAgaWYgKCFtYWpvciAmJiBtYXliZU5vZGVQYXRoKSB7XG4gICAgY29uc3Qgbm9kZVZlcnNpb24gPSAoX2QgPSAvdihcXGQrKVxcLihcXGQrKVxcLihcXGQrKS8uZXhlYyhtYXliZU5vZGVQYXRoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kWzBdO1xuICAgIGlmIChub2RlVmVyc2lvbikge1xuICAgICAgW21ham9yLCBtaW5vcl0gPSBub2RlVmVyc2lvbi5zdWJzdHJpbmcoMSkuc3BsaXQoXCIuXCIpLm1hcCgodikgPT4gcGFyc2VJbnQodiwgMTApKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFtYWpvciB8fCAhbWlub3IpXG4gICAgcmV0dXJuO1xuICBpZiAobWFqb3IgPiAxOClcbiAgICByZXR1cm47XG4gIGlmIChtYWpvciA9PT0gMTggJiYgbWlub3IgPj0gMTMpXG4gICAgcmV0dXJuO1xuICBjb25zb2xlLmVycm9yKFxuICAgIGBbVVRdOiBZT1UgQVJFIFVTSU5HIEEgTEVHQUNZICgke21ham9yfS4ke21pbm9yfSkgTk9ERSBWRVJTSU9OIFdISUNIIElTTidUIE9GRklDSUFMTFkgU1VQUE9SVEVELiBQTEVBU0UgVVBHUkFERSBUTyBOT0RFIF4xOC4xMy5gXG4gICk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuZXhwb3J0IHtcbiAgaW5jb21wYXRpYmxlTm9kZUd1YXJkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstV1BTWTNNRkoubWpzLm1hcCJdLCJuYW1lcyI6WyJpbmNvbXBhdGlibGVOb2RlR3VhcmQiLCJfYSIsIl9iIiwiX2MiLCJfZCIsInByb2Nlc3MiLCJtYWpvciIsIm1pbm9yIiwibWF5YmVOb2RlVmVyc2lvbiIsInZlcnNpb25zIiwibm9kZSIsInNwbGl0IiwibWFwIiwidiIsInBhcnNlSW50IiwibWF5YmVOb2RlUGF0aCIsImVudiIsIk5PREUiLCJub2RlVmVyc2lvbiIsImV4ZWMiLCJzdWJzdHJpbmciLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/next.mjs":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/dist/next.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var _chunk_F3SNDKZQ_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-F3SNDKZQ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-F3SNDKZQ.mjs\");\n/* harmony import */ var _chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-5KWT532U.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-BPTHKJTK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs\");\n/* harmony import */ var _chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-T2XS27LC.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\");\n\n\n\n\n\n// src/next.ts\nvar createUploadthing = (opts)=>(0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_3__.createBuilder)(opts);\nvar createNextRouteHandler = (opts)=>{\n    const handlers = (0,_chunk_F3SNDKZQ_mjs__WEBPACK_IMPORTED_MODULE_0__.createServerHandler)(opts);\n    return {\n        POST: (req)=>handlers.POST(req),\n        GET: (req)=>handlers.GET(req)\n    };\n};\n //# sourceMappingURL=next.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRThCO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFOUIsY0FBYztBQUNkLElBQUlFLG9CQUFvQixDQUFDQyxPQUFTRixrRUFBYUEsQ0FBQ0U7QUFDaEQsSUFBSUMseUJBQXlCLENBQUNEO0lBQzVCLE1BQU1FLFdBQVdMLHdFQUFtQkEsQ0FBQ0c7SUFDckMsT0FBTztRQUNMRyxNQUFNLENBQUNDLE1BQVFGLFNBQVNDLElBQUksQ0FBQ0M7UUFDN0JDLEtBQUssQ0FBQ0QsTUFBUUYsU0FBU0csR0FBRyxDQUFDRDtJQUM3QjtBQUNGO0FBSUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlYWRzLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvbmV4dC5tanM/YzU1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjcmVhdGVTZXJ2ZXJIYW5kbGVyXG59IGZyb20gXCIuL2NodW5rLUYzU05ES1pRLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay01S1dUNTMyVS5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstV1BTWTNNRkoubWpzXCI7XG5pbXBvcnQge1xuICBjcmVhdGVCdWlsZGVyXG59IGZyb20gXCIuL2NodW5rLUJQVEhLSlRLLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1UMlhTMjdMQy5tanNcIjtcblxuLy8gc3JjL25leHQudHNcbnZhciBjcmVhdGVVcGxvYWR0aGluZyA9IChvcHRzKSA9PiBjcmVhdGVCdWlsZGVyKG9wdHMpO1xudmFyIGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIgPSAob3B0cykgPT4ge1xuICBjb25zdCBoYW5kbGVycyA9IGNyZWF0ZVNlcnZlckhhbmRsZXIob3B0cyk7XG4gIHJldHVybiB7XG4gICAgUE9TVDogKHJlcSkgPT4gaGFuZGxlcnMuUE9TVChyZXEpLFxuICAgIEdFVDogKHJlcSkgPT4gaGFuZGxlcnMuR0VUKHJlcSlcbiAgfTtcbn07XG5leHBvcnQge1xuICBjcmVhdGVOZXh0Um91dGVIYW5kbGVyLFxuICBjcmVhdGVVcGxvYWR0aGluZ1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5leHQubWpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJIYW5kbGVyIiwiY3JlYXRlQnVpbGRlciIsImNyZWF0ZVVwbG9hZHRoaW5nIiwib3B0cyIsImNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIiLCJoYW5kbGVycyIsIlBPU1QiLCJyZXEiLCJHRVQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/next.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-5KWT532U.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML)\n/* harmony export */ });\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml) => {\n  const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n  const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n  const code = codeMatch == null ? void 0 : codeMatch[1];\n  const message = messageMatch == null ? void 0 : messageMatch[1];\n  if (!code || !message)\n    return null;\n  return { code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE, message };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n  AccessDenied: \"FORBIDDEN\",\n  // 403 Forbidden\n  EntityTooSmall: \"TOO_SMALL\",\n  // 400 Bad Request\n  EntityTooLarge: \"TOO_LARGE\",\n  // 400 Bad Request\n  ExpiredToken: \"FORBIDDEN\",\n  // 400 Bad Request\n  IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n  // 400 Bad Request\n  InternalError: \"INTERNAL_SERVER_ERROR\",\n  // 500 Internal Server Error\n  KeyTooLongError: \"KEY_TOO_LONG\",\n  // 400 Bad Request\n  MaxMessageLengthExceeded: \"TOO_LARGE\"\n  // 400 Bad Request\n};\n\n\n//# sourceMappingURL=chunk-5KWT532U.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay01S1dUNTMyVS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhyZWFkcy8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L2NodW5rLTVLV1Q1MzJVLm1qcz8wODRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbnRlcm5hbC9zMy1lcnJvci1wYXJzZXIudHNcbnZhciBtYXliZVBhcnNlUmVzcG9uc2VYTUwgPSAobWF5YmVYbWwpID0+IHtcbiAgY29uc3QgY29kZU1hdGNoID0gbWF5YmVYbWwubWF0Y2goLzxDb2RlPiguKj8pPFxcL0NvZGU+L3MpO1xuICBjb25zdCBtZXNzYWdlTWF0Y2ggPSBtYXliZVhtbC5tYXRjaCgvPE1lc3NhZ2U+KC4qPyk8XFwvTWVzc2FnZT4vcyk7XG4gIGNvbnN0IGNvZGUgPSBjb2RlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IGNvZGVNYXRjaFsxXTtcbiAgY29uc3QgbWVzc2FnZSA9IG1lc3NhZ2VNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogbWVzc2FnZU1hdGNoWzFdO1xuICBpZiAoIWNvZGUgfHwgIW1lc3NhZ2UpXG4gICAgcmV0dXJuIG51bGw7XG4gIHJldHVybiB7IGNvZGU6IHMzQ29kZVRvVXBsb2FkVGhpbmdDb2RlW2NvZGVdID8/IERFRkFVTFRfRVJST1JfQ09ERSwgbWVzc2FnZSB9O1xufTtcbnZhciBERUZBVUxUX0VSUk9SX0NPREUgPSBcIlVQTE9BRF9GQUlMRURcIjtcbnZhciBzM0NvZGVUb1VwbG9hZFRoaW5nQ29kZSA9IHtcbiAgQWNjZXNzRGVuaWVkOiBcIkZPUkJJRERFTlwiLFxuICAvLyA0MDMgRm9yYmlkZGVuXG4gIEVudGl0eVRvb1NtYWxsOiBcIlRPT19TTUFMTFwiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgRW50aXR5VG9vTGFyZ2U6IFwiVE9PX0xBUkdFXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBFeHBpcmVkVG9rZW46IFwiRk9SQklEREVOXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBJbmNvcnJlY3ROdW1iZXJPZkZpbGVzSW5Qb3N0UmVxdWVzdDogXCJUT09fTUFOWV9GSUxFU1wiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgSW50ZXJuYWxFcnJvcjogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgLy8gNTAwIEludGVybmFsIFNlcnZlciBFcnJvclxuICBLZXlUb29Mb25nRXJyb3I6IFwiS0VZX1RPT19MT05HXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBNYXhNZXNzYWdlTGVuZ3RoRXhjZWVkZWQ6IFwiVE9PX0xBUkdFXCJcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG59O1xuXG5leHBvcnQge1xuICBtYXliZVBhcnNlUmVzcG9uc2VYTUxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay01S1dUNTMyVS5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __require: () => (/* binding */ __require),\n/* harmony export */   __toESM: () => (/* binding */ __toESM)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n  get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n}) : x)(function(x) {\n  if (typeof require !== \"undefined\")\n    return require.apply(this, arguments);\n  throw new Error('Dynamic require of \"' + x + '\" is not supported');\n});\nvar __commonJS = (cb, mod) => function __require2() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n\n//# sourceMappingURL=chunk-T2XS27LC.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1UMlhTMjdMQy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyREFBMkQsYUFBYTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7O0FBTUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVhZHMvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1UMlhTMjdMQy5tanM/ZWQ4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcmVxdWlyZSA9IC8qIEBfX1BVUkVfXyAqLyAoKHgpID0+IHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiID8gcmVxdWlyZSA6IHR5cGVvZiBQcm94eSAhPT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBQcm94eSh4LCB7XG4gIGdldDogKGEsIGIpID0+ICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVpcmUgOiBhKVtiXVxufSkgOiB4KShmdW5jdGlvbih4KSB7XG4gIGlmICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm4gcmVxdWlyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZSBvZiBcIicgKyB4ICsgJ1wiIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn0pO1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlMigpIHtcbiAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcblxuZXhwb3J0IHtcbiAgX19yZXF1aXJlLFxuICBfX2NvbW1vbkpTLFxuICBfX3RvRVNNXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstVDJYUzI3TEMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/client.mjs":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/dist/client.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject)\n/* harmony export */ });\n/* harmony import */ var _chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5KWT532U.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\");\n/* harmony import */ var _chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-T2XS27LC.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/client.ts\n\n\n// src/internal/component-theming.ts\n\nvar generatePermittedFileTypes = (config) => {\n  const fileTypes = config ? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config) : [];\n  const maxFileCount = config ? Object.values(config).map((v) => v.maxFileCount) : [];\n  return { fileTypes, multiple: maxFileCount.some((v) => v && v > 1) };\n};\nvar capitalizeStart = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar INTERNAL_doFormatting = (config) => {\n  if (!config)\n    return \"\";\n  const allowedTypes = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config);\n  const formattedTypes = allowedTypes.map((f) => f === \"blob\" ? \"file\" : f);\n  if (formattedTypes.length > 1) {\n    const lastType = formattedTypes.pop();\n    return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n  }\n  const key = allowedTypes[0];\n  const formattedKey = formattedTypes[0];\n  const { maxFileSize, maxFileCount } = config[key];\n  if (maxFileCount && maxFileCount > 1) {\n    return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n  } else {\n    return `${formattedKey} (${maxFileSize})`;\n  }\n};\nvar allowedContentTextLabelGenerator = (config) => {\n  return capitalizeStart(INTERNAL_doFormatting(config));\n};\nvar styleFieldToClassName = (styleField, args) => {\n  if (typeof styleField === \"string\")\n    return styleField;\n  if (typeof styleField === \"function\") {\n    const result = styleField(args);\n    if (typeof result === \"string\")\n      return result;\n  }\n  return \"\";\n};\nvar styleFieldToCssObject = (styleField, args) => {\n  if (typeof styleField === \"object\")\n    return styleField;\n  if (typeof styleField === \"function\") {\n    const result = styleField(args);\n    if (typeof result === \"object\")\n      return result;\n  }\n  return {};\n};\nvar contentFieldToContent = (contentField, arg) => {\n  if (!contentField)\n    return null;\n  if (typeof contentField !== \"function\")\n    return contentField;\n  if (typeof contentField === \"function\") {\n    const result = contentField(arg);\n    return result;\n  }\n};\n\n// src/client.ts\nfunction fetchWithProgress(url, opts = {}, onProgress, onUploadBegin) {\n  return new Promise((res, rej) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(opts.method ?? \"get\", url);\n    opts.headers && Object.keys(opts.headers).forEach(\n      (h) => opts.headers && xhr.setRequestHeader(h, opts.headers.get(h) ?? \"\")\n    );\n    xhr.onload = (e) => {\n      res(e.target);\n    };\n    xhr.onerror = rej;\n    if (xhr.upload && onProgress)\n      xhr.upload.onprogress = onProgress;\n    if (xhr.upload && onUploadBegin)\n      xhr.upload.onloadstart = onUploadBegin;\n    xhr.send(opts.body);\n  });\n}\nvar createAPIRequestUrl = (config) => {\n  const url = new URL(\n    config.url ?? `${window.location.origin}/api/uploadthing`\n  );\n  const queryParams = new URLSearchParams(url.search);\n  queryParams.set(\"actionType\", config.actionType);\n  queryParams.set(\"slug\", config.slug);\n  url.search = queryParams.toString();\n  return url.toString();\n};\nvar DANGEROUS__uploadFiles = async (opts, config) => {\n  const s3ConnectionRes = await fetch(\n    createAPIRequestUrl({\n      url: config == null ? void 0 : config.url,\n      slug: String(opts.endpoint),\n      actionType: \"upload\"\n    }),\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        files: opts.files.map((f) => f.name),\n        input: opts.input\n      }),\n      // Express requires Content-Type to be explicitly set to parse body properly\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  ).then(async (res) => {\n    if (!res.ok) {\n      const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError.fromResponse(res);\n      throw error;\n    }\n    const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)(res);\n    if (jsonOrError instanceof Error) {\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: jsonOrError.message,\n        cause: res\n      });\n    }\n    return jsonOrError;\n  });\n  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n      code: \"BAD_REQUEST\",\n      message: \"No URL. How did you even get here?\",\n      cause: s3ConnectionRes\n    });\n  }\n  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {\n    const file = opts.files.find((f) => f.name === presigned.name);\n    if (!file) {\n      console.error(\"No file found for presigned URL\", presigned);\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"NOT_FOUND\",\n        message: \"No file found for presigned URL\",\n        cause: `Expected file with name ${presigned.name} but got '${opts.files.join(\",\")}'`\n      });\n    }\n    const { url, fields } = presigned.presignedUrl;\n    const formData = new FormData();\n    if (presigned.fileType === file.type.split(\"/\")[0] || presigned.fileType === file.type) {\n      formData.append(\"Content-Type\", file.type);\n    } else if (presigned.fileType === \"blob\") {\n      formData.append(\"Content-Type\", \"application/octet-stream\");\n    } else if (presigned.fileType === \"pdf\") {\n      formData.append(\"Content-Type\", \"application/pdf\");\n    }\n    Object.entries({ ...fields, file }).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n    const upload = await fetchWithProgress(\n      url,\n      {\n        method: \"POST\",\n        body: formData,\n        headers: new Headers({\n          Accept: \"application/xml\"\n        })\n      },\n      (progressEvent) => {\n        var _a;\n        return (_a = opts.onUploadProgress) == null ? void 0 : _a.call(opts, {\n          file: file.name,\n          progress: progressEvent.loaded / progressEvent.total * 100\n        });\n      },\n      () => {\n        var _a;\n        (_a = opts.onUploadBegin) == null ? void 0 : _a.call(opts, {\n          file: file.name\n        });\n      }\n    );\n    if (upload.status > 299 || upload.status < 200) {\n      await fetch(\n        createAPIRequestUrl({\n          url: config == null ? void 0 : config.url,\n          slug: String(opts.endpoint),\n          actionType: \"failure\"\n        }),\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            fileKey: fields.key\n          })\n        }\n      );\n      const parsed = (0,_chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(upload.responseText);\n      if (parsed == null ? void 0 : parsed.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n          code: parsed.code,\n          message: parsed.message\n        });\n      } else {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n          code: \"UPLOAD_FAILED\",\n          message: `Failed to upload file ${file.name} to S3`,\n          cause: upload.responseText\n        });\n      }\n    }\n    const genUrl = \"https://utfs.io/f/\" + encodeURIComponent(fields.key);\n    await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.pollForFileData)(presigned.key);\n    const ret = {\n      fileName: file.name,\n      name: file.name,\n      fileSize: file.size,\n      size: file.size,\n      fileKey: presigned.key,\n      key: presigned.key,\n      fileUrl: genUrl,\n      url: genUrl\n    };\n    return ret;\n  });\n  return Promise.all(fileUploadPromises);\n};\nvar genUploader = () => {\n  return DANGEROUS__uploadFiles;\n};\nvar classNames = (...classes) => {\n  return classes.filter(Boolean).join(\" \");\n};\nvar generateMimeTypes = (fileTypes) => {\n  const accepted = fileTypes.map((type) => {\n    if (type === \"blob\")\n      return \"blob\";\n    if (type === \"pdf\")\n      return \"application/pdf\";\n    if (type.includes(\"/\"))\n      return type;\n    else\n      return `${type}/*`;\n  });\n  if (accepted.includes(\"blob\")) {\n    return void 0;\n  }\n  return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes) => {\n  const mimeTypes = generateMimeTypes(fileTypes);\n  if (!mimeTypes)\n    return void 0;\n  return Object.fromEntries(mimeTypes.map((type) => [type, []]));\n};\n\n//# sourceMappingURL=client.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/client.mjs\n");

/***/ })

};
;